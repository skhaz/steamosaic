name: Deploy

on:
  push:
    branches:
      - main

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install AWS tools
        run: pip --no-cache-dir install awscli

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Ensure Lambda IAM role exists
        run: |
          ROLE_NAME=steamosaic-lambda-role
          ASSUME_POLICY='{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
          aws iam get-role --role-name $ROLE_NAME || \
            aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document "$ASSUME_POLICY"

      - name: Attach IAM policies to role
        run: |
          ROLE_NAME=steamosaic-lambda-role
          for POLICY in \
            arn:aws:iam::aws:policy/AWSLambdaBasicExecutionRole \
            arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator; do
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn $POLICY || true
          done

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories \
            --repository-names steamosaic \
            --region ${{ secrets.AWS_DEFAULT_REGION }} \
          || aws ecr create-repository \
            --repository-name steamosaic \
            --region ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password \
            | docker login \
                --username AWS \
                --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build, Tag & Push Docker image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/steamosaic:latest
          docker buildx --platform=linux/amd64 --tag steamosaic .
          docker tag steamosaic:latest $IMAGE_URI
          docker push $IMAGE_URI

      - name: Update AWS Lambda function
        run: |
          ROLE_ARN=$(aws iam get-role --role-name steamosaic-lambda-role --query Role.Arn --output text)
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/steamosaic:latest
          if aws lambda get-function --function-name steamosaic; then
            aws lambda update-function-code --function-name steamosaic --image-uri $IMAGE_URI
            aws lambda update-function-configuration --function-name steamosaic --memory-size 2048 --timeout 900
            aws lambda wait function-updated --function-name steamosaic
          else
            aws lambda create-function \
              --function-name steamosaic \
              --architectures arm64 \
              --package-type Image \
              --code ImageUri=$IMAGE_URI \
              --role $ROLE_ARN \
              --timeout 900 \
              --memory-size 2048 || true
          fi

      - name: Cleanup old ECR images
        run: |
          REPO=steamosaic

          CUTOFF=$(date -d '30 days ago' --utc +%Y-%m-%dT%H:%M:%SZ)

          DIGESTS=$(aws ecr describe-images \
            --repository-name $REPO \
            --query 'imageDetails[*].{digest:imageDigest,pushedAt:imagePushedAt}' \
            --output json \
          | jq -r --arg CUT "$CUTOFF" \
              '.[] | select(.pushedAt < $CUT) | .digest')

          for d in $DIGESTS; do
            echo "Deleting image from ECR $d..."
            aws ecr batch-delete-image \
              --repository-name $REPO \
              --image-ids imageDigest=$d
          done

      - name: Purge Cloudflare Cache
        env:
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data '{"purge_everything":true}'
